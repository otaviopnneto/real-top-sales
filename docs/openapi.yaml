openapi: 3.0.0
info:
  title: API Sistema de Corretores e Pontos
  description: API para gerenciamento de corretores e sistema de pontuação
  version: 1.0.0
  contact:
    name: Suporte
    email: suporte@empresa.com

servers:
  - url: https://cqjviutyjppzxvwalwdv.supabase.co
    description: Servidor Supabase

paths:
  /auth/v1/token:
    post:
      summary: Autenticar usuário
      description: Realiza autenticação do usuário e retorna token JWT
      tags:
        - Autenticação
      parameters:
        - name: grant_type
          in: query
          required: true
          schema:
            type: string
            enum: [password]
            example: password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "email@email.com"
                password:
                  type: string
                  format: password
                  example: "Abc@1234"
      responses:
        '200':
          description: Autenticação realizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsImtpZCI6IlJENUg2dnA2MUZ6YlVRelEiLCJ0eXAiOiJKV1QifQ..."
                  token_type:
                    type: string
                    example: "bearer"
                  expires_in:
                    type: integer
                    example: 3600
                  expires_at:
                    type: integer
                    example: 1761654205
                  refresh_token:
                    type: string
                    example: "k5piz57ybqrd"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "165288a0-b7c1-496d-8e7f-369e4e08eb94"
                      email:
                        type: string
                        example: "email@email.com"
                      role:
                        type: string
                        example: "authenticated"
        '400':
          description: Credenciais inválidas ou erro na autenticação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/points:
    get:
      summary: Listar pontos
      description: Retorna uma lista paginada de pontos com diversos filtros disponíveis
      tags:
        - Pontos
      security:
        - BearerAuth: []
      parameters:
        - name: idcorretor
          in: query
          description: Filtrar por ID do corretor
          required: false
          schema:
            type: integer
            example: 192
        - name: idempreendimento
          in: query
          description: Filtrar por ID do empreendimento
          required: false
          schema:
            type: integer
            example: 15
        - name: idcidade
          in: query
          description: Filtrar por ID da cidade
          required: false
          schema:
            type: integer
            example: 1
        - name: created_from
          in: query
          description: Filtrar a partir desta data de criação (formato YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: created_to
          in: query
          description: Filtrar até esta data de criação (formato YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2024-12-31"
        - name: updated_from
          in: query
          description: Filtrar a partir desta data de atualização (formato YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: last_id
          in: query
          description: ID para paginação (retorna registros com ID menor que este)
          required: false
          schema:
            type: integer
            example: 1000
      responses:
        '200':
          description: Lista de pontos retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 50
                  next_page_id:
                    type: integer
                    nullable: true
                    example: 950
                  next_page_url:
                    type: string
                    nullable: true
                    example: "https://cqjviutyjppzxvwalwdv.supabase.co/functions/v1/points?last_id=950"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PontoCompleto'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Criar ponto manual
      description: Cria um novo ponto do tipo manual para um corretor
      tags:
        - Pontos
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idcorretor
                - idempreendimento
                - valor
                - motivo
              properties:
                idcorretor:
                  type: integer
                  description: ID do corretor
                  example: 192
                idempreendimento:
                  type: integer
                  description: ID do empreendimento
                  example: 15
                valor:
                  type: number
                  format: float
                  description: Valor dos pontos
                  example: 100.5
                motivo:
                  type: string
                  description: Motivo da pontuação
                  example: "Venda realizada"
      responses:
        '201':
          description: Ponto criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ponto'
        '400':
          description: Erro de validação ou dados ausentes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/points/{id}:
    patch:
      summary: Atualizar ponto manual
      description: Atualiza um ponto existente do tipo manual pelo ID na URL
      tags:
        - Pontos
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do ponto a ser atualizado
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - valor
                - motivo
              properties:
                valor:
                  type: number
                  format: float
                  description: Valor dos pontos
                  example: 150.0
                motivo:
                  type: string
                  description: Motivo da pontuação
                  example: "Venda atualizada"
      responses:
        '200':
          description: Ponto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ponto'
        '400':
          description: Erro de validação ou dados ausentes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Ponto não é do tipo MANUAL e não pode ser atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ponto não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Excluir ponto manual
      description: Exclui um ponto existente do tipo manual pelo ID na URL
      tags:
        - Pontos
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do ponto a ser excluído
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Ponto excluído com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Ponto excluído com sucesso"
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Ponto não é do tipo MANUAL e não pode ser excluído
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ponto não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/corretores:
    get:
      summary: Listar corretores
      description: Retorna uma lista paginada de corretores com possibilidade de filtros
      tags:
        - Corretores
      security:
        - BearerAuth: []
      parameters:
        - name: idcorretor
          in: query
          description: Filtrar por ID específico do corretor
          required: false
          schema:
            type: integer
            example: 192
        - name: last_id
          in: query
          description: ID para paginação (retorna registros com ID menor que este)
          required: false
          schema:
            type: integer
            example: 200
        - name: status
          in: query
          description: Filtrar por status do corretor
          required: false
          schema:
            type: string
            enum: [ativo, inativo]
            example: ativo
      responses:
        '200':
          description: Lista de corretores retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 1
                  next_page_id:
                    type: integer
                    nullable: true
                    example: null
                  next_page_url:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Corretor'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/corretores/{id}:
    patch:
      summary: Atualizar corretor
      description: Atualiza o status ou avatar de um corretor específico pelo ID na URL
      tags:
        - Corretores
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do corretor a ser atualizado
          schema:
            type: integer
            example: 192
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Novo status do corretor
                  enum: [ATIVO, INATIVO]
                  example: ATIVO
                avatarFile:
                  type: string
                  format: binary
                  description: Arquivo de imagem para avatar
                alias:
                  type: string
                  description: Nome amigável a ser exibido para o corretor
                  example: Fulano
      responses:
        '200':
          description: Corretor atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Corretor'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/base-points:
    get:
      summary: Listar pontos base
      description: Retorna a lista completa de pontos base do sistema (sem paginação)
      tags:
        - Pontos Base
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: Filtrar por ID específico do ponto base
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de pontos base retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 7
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PontoBase'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/base-points/{id}:
    patch:
      summary: Atualizar ponto base
      description: Atualiza um ponto base específico pelo ID na URL
      tags:
        - Pontos Base
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do ponto base a ser atualizado
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                motivo:
                  type: string
                  description: Descrição do motivo do ponto base
                  example: "Venda direta"
                pontobase:
                  type: number
                  format: float
                  description: Valor do ponto base
                  example: 15.5
      responses:
        '200':
          description: Ponto base atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/PontoBase'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ponto base não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/enterprises:
    get:
      summary: Listar empreendimentos
      description: Retorna a lista completa de empreendimentos (sem paginação)
      tags:
        - Empreendimentos
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: Filtrar por ID específico do empreendimento
          required: false
          schema:
            type: integer
            example: 1
        - name: idcidade
          in: query
          description: Filtrar por ID da cidade
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Lista de empreendimentos retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Empreendimento'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/enterprises/{id}:
    patch:
      summary: Atualizar empreendimento
      description: Atualiza apenas a cidade de um empreendimento específico pelo ID na URL
      tags:
        - Empreendimentos
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do empreendimento a ser atualizado
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idcidade
              properties:
                idcidade:
                  type: integer
                  description: ID da cidade do empreendimento
                  example: 5
      responses:
        '200':
          description: Empreendimento atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Empreendimento'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Empreendimento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /functions/v1/cities:
    get:
      summary: Listar cidades
      description: Retorna a lista completa de cidades (sem paginação)
      tags:
        - Cidades
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: Filtrar por ID específico da cidade
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de cidades retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 50
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cidade'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Criar cidade
      description: Cria uma nova cidade no formato "CIDADE - UF"
      tags:
        - Cidades
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
              properties:
                nome:
                  type: string
                  description: Nome da cidade no formato "CIDADE - UF"
                  example: "São Paulo - SP"
      responses:
        '201':
          description: Cidade criada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Cidade'
        '400':
          description: Erro de validação ou formato inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/cities/{id}:
    patch:
      summary: Atualizar cidade
      description: Atualiza o nome de uma cidade específica pelo ID na URL
      tags:
        - Cidades
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID da cidade a ser atualizada
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
              properties:
                nome:
                  type: string
                  description: Novo nome da cidade no formato "CIDADE - UF"
                  example: "Rio de Janeiro - RJ"
      responses:
        '200':
          description: Cidade atualizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Cidade'
        '400':
          description: Erro de validação ou formato inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cidade não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Excluir cidade
      description: Exclui uma cidade específica pelo ID na URL
      tags:
        - Cidades
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID da cidade a ser excluída
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Cidade excluída com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Cidade excluída com sucesso"
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cidade não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cidade está sendo utilizada em outros registros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/boosters:
    get:
      summary: Listar boosters
      description: Retorna a lista completa de boosters (sem paginação)
      tags:
        - Boosters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: Filtrar por ID específico do booster
          required: false
          schema:
            type: integer
            example: 1
        - name: idempreendimento
          in: query
          description: Filtrar por ID do empreendimento
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Lista de boosters retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booster'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Criar booster
      description: Cria um novo booster para um empreendimento
      tags:
        - Boosters
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - valor
                - idempreendimento
                - datainicio
                - datafim
                - descricao
              properties:
                valor:
                  type: number
                  format: float
                  description: Valor do booster (deve ser maior que 0)
                  example: 1.5
                idempreendimento:
                  type: integer
                  description: ID do empreendimento
                  example: 5
                datainicio:
                  type: string
                  format: date
                  description: Data de início do booster (formato YYYY-MM-DD)
                  example: "2024-01-01"
                datafim:
                  type: string
                  format: date
                  description: Data de fim do booster (formato YYYY-MM-DD)
                  example: "2024-12-31"
                descricao:
                  type: string
                  description: Descrição do booster
                  example: "Booster de lançamento"
      responses:
        '201':
          description: Booster criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Booster'
        '400':
          description: Erro de validação, datas conflitantes ou empreendimento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Já existe um booster ativo para este empreendimento no período
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/boosters/{id}:
    patch:
      summary: Atualizar booster
      description: Atualiza um booster específico pelo ID na URL
      tags:
        - Boosters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do booster a ser atualizado
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                valor:
                  type: number
                  format: float
                  description: Valor do booster (deve ser maior que 0)
                  example: 2.0
                idempreendimento:
                  type: integer
                  description: ID do empreendimento
                  example: 5
                datainicio:
                  type: string
                  format: date
                  description: Data de início do booster (formato YYYY-MM-DD)
                  example: "2024-02-01"
                datafim:
                  type: string
                  format: date
                  description: Data de fim do booster (formato YYYY-MM-DD)
                  example: "2024-11-30"
                descricao:
                  type: string
                  description: Descrição do booster
                  example: "Booster atualizado"
      responses:
        '200':
          description: Booster atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Booster'
        '400':
          description: Erro de validação, datas conflitantes ou empreendimento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booster não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Já existe um booster ativo para este empreendimento no período
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Excluir booster
      description: Exclui um booster específico pelo ID na URL
      tags:
        - Boosters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do booster a ser excluído
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Booster excluído com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Booster excluído com sucesso"
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booster não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Booster está sendo utilizado em outros registros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /functions/v1/imobiliarias:
    get:
      summary: Listar imobiliárias
      description: Retorna a lista completa de imobiliárias (sem paginação)
      tags:
        - Imobiliárias
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: Filtrar por ID específico da imobiliária
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de imobiliárias retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 50
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Imobiliaria'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/imobiliarias/{id}:
    patch:
      summary: Atualizar alias da imobiliária
      description: Atualiza apenas o alias de uma imobiliária específica pelo ID na URL
      tags:
        - Imobiliárias
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID da imobiliária a ser atualizada
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - alias
              properties:
                alias:
                  type: string
                  description: Novo alias da imobiliária (string vazia para remover)
                  example: "Imobiliária Top"
      responses:
        '200':
          description: Imobiliária atualizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Imobiliaria'
        '400':
          description: Erro de validação ou alias inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Imobiliária não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/users:
    get:
      summary: Listar usuários
      description: Retorna uma lista paginada de usuários do sistema com possibilidade de filtros
      tags:
        - Usuários
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: Filtrar por ID específico do usuário
          required: false
          schema:
            type: integer
            example: 1
        - name: email
          in: query
          description: Filtrar por email específico do usuário
          required: false
          schema:
            type: string
            example: email@email.com
        - name: last_id
          in: query
          description: ID para paginação (retorna registros com ID menor que este)
          required: false
          schema:
            type: integer
            example: 100
        - name: tipo
          in: query
          description: Filtrar por tipo de usuário
          required: false
          schema:
            type: string
            enum: [admlocal, master, imobiliaria, corretor]
            example: master
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 50
                  next_page_id:
                    type: integer
                    nullable: true
                    example: 49
                  next_page_url:
                    type: string
                    nullable: true
                    example: "https://cqjviutyjppzxvwalwdv.supabase.co/functions/v1/users?last_id=49"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Usuario'
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Criar usuário
      description: Cria um novo usuário do tipo admlocal, master ou imobiliaria. Usuários do tipo corretor são criados automaticamente pelo sistema.
      tags:
        - Usuários
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
                - tipo
                - idcorresp
              properties:
                login:
                  type: string
                  format: email
                  description: E-mail do usuário (será usado como login)
                  example: "admin@empresa.com"
                password:
                  type: string
                  format: password
                  description: Senha do usuário (mínimo 6 caracteres)
                  example: "Senha@123"
                tipo:
                  type: string
                  description: Tipo de usuário
                  enum: [admlocal, master, imobiliaria]
                  example: "master"
                idcorresp:
                  type: integer
                  description: |
                    ID correspondente conforme o tipo:
                    - master: deve ser 0
                    - admlocal: ID de empreendimento válido
                    - imobiliaria: ID de imobiliária válida
                  example: 0
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Usuario'
                  message:
                    type: string
                    example: "Usuário criado com sucesso"
        '400':
          description: Erro de validação, dados inválidos ou usuário já existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Empreendimento ou imobiliária não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/v1/users/{id}:
    patch:
      summary: Atualizar usuário
      description: |
        Atualiza informações de um usuário específico pelo ID na URL.
  
        Esta rota aceita **dois formatos de requisição**:
        - `application/json`: para atualizar senha, status, tipo ou idcorresp.
        - `multipart/form-data`: para atualizar o avatar (foto de perfil).
  
      tags:
        - Usuários
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser atualizado
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  description: Nova senha (mínimo 6 caracteres)
                  example: "NovaSenha@123"
                status:
                  type: string
                  enum: [ATIVO, INATIVO]
                  example: "ATIVO"
                tipo:
                  type: string
                  enum: [admlocal, master, imobiliaria]
                  example: "admlocal"
                idcorresp:
                  type: integer
                  example: 5
                  description: |
                    ID correspondente conforme o tipo:
                    - master: deve ser 0
                    - admlocal: ID de empreendimento válido
                    - imobiliaria: ID de imobiliária válida
                avatarFile:
                  type: string
                  format: binary
                  description: Arquivo de imagem para o avatar do usuário
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Usuario'
        '400':
          description: Erro de validação ou dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário, empreendimento ou imobiliária não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Excluir usuário
      description: Exclui um usuário específico pelo ID na URL. Não é permitido excluir usuários do tipo corretor.
      tags:
        - Usuários
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário a ser excluído
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Usuário excluído com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Usuário excluído com sucesso"
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token de autenticação inválido ou não fornecido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Não é permitido excluir usuários do tipo corretor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    PontoBase:
      type: object
      properties:
        id:
          type: integer
          example: 1
        motivo:
          type: string
          example: "Venda direta"
        pontobase:
          type: number
          format: float
          example: 15.5
        created_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"

    Empreendimento:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "Residencial Solar"
        idcidade:
          type: integer
          nullable: true
          example: 5
        idcv:
          type: integer
          example: 100
        basecv:
          type: string
          example: "VCA"
        created_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        nomecidade:
          type: string
          example: "VITÓRIA DA CONQUISTA - BA"

    Corretor:
      type: object
      properties:
        id:
          type: integer
          example: 192
        documento:
          type: string
          example: "62559604396"
        nome:
          type: string
          example: "THAYLANA CUNHA MACHADO"
        alias:
          type: string
          nullable: true
          example: null
        avatar:
          type: string
          nullable: true
          example: null
        status:
          type: string
          enum: [ATIVO, INATIVO]
          example: "ATIVO"
        idvca:
          type: integer
          example: 2221
        idlotear:
          type: integer
          nullable: true
          example: null
        idimob:
          type: integer
          example: 46
        email:
          type: string
          format: email
          example: "thaylanacunha@outlook.com"
        created_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        nomeimob:
          type: string
          example: "Imobiliária 01"

    Ponto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        idcorretor:
          type: integer
          example: 192
        idempreendimento:
          type: integer
          example: 15
        valor:
          type: number
          format: float
          example: 100.5
        motivo:
          type: string
          example: "Venda realizada"
        categoria:
          type: string
          example: "OUTROS"
        tipo:
          type: string
          example: "MANUAL"
        booster:
          type: number
          format: float
          example: 1.0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PontoCompleto:
      type: object
      description: View completa com joins de relacionamentos
      allOf:
        - $ref: '#/components/schemas/Ponto'
        - type: object
          properties:
            nome_corretor:
              type: string
              example: "THAYLANA CUNHA MACHADO"
            nome_empreendimento:
              type: string
              example: "Residencial Solar"
    Cidade:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "São Paulo - SP"
        created_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"

    Booster:
      type: object
      properties:
        id:
          type: integer
          example: 1
        valor:
          type: number
          format: float
          example: 1.5
        idempreendimento:
          type: integer
          example: 5
        datainicio:
          type: string
          format: date
          example: "2024-01-01"
        datafim:
          type: string
          format: date
          example: "2024-12-31"
        descricao:
          type: string
          example: "Booster de lançamento"
        created_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
    Imobiliaria:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nome:
          type: string
          example: "Imobiliária Exemplo Ltda"
        idvca:
          type: integer
          nullable: true
          example: 123
        idlotear:
          type: integer
          nullable: true
          example: 456
        alias:
          type: string
          nullable: true
          example: "Imob Top"
        created_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-27T21:28:08.198523+00:00"          
    Usuario:
      type: object
      properties:
        id:
          type: integer
          example: 1
        login:
          type: string
          example: "admin@empresa.com"
        tipo:
          type: string
          enum: [admlocal, master, imobiliaria, corretor]
          example: "master"
        idcorresp:
          type: integer
          example: 0
        status:
          type: string
          enum: [ATIVO, INATIVO]
          example: "ATIVO"
        uid:
          type: string
          format: uuid
          nullable: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        avatar:
          type: string
          example: "https://cqjviutyjppzxvwalwdv.supabase.co/storage/v1/object/public/avatars_users/example.png"
        created_at:
          type: string
          format: date-time
          example: "2025-10-28T19:58:47.077275+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-28T19:58:47.077275+00:00"         
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        error:
          type: string
          example: "Mensagem de erro descritiva"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token de autenticação JWT obtido via Supabase Auth
